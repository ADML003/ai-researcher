"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@clerk/nextjs";
import {
  FileText,
  Download,
  Search,
  Filter,
  Calendar,
  Users,
  Target,
  ExternalLink,
  ArrowLeft,
  MessageSquare,
} from "lucide-react";
import Link from "next/link";

interface ResearchReport {
  id: number;
  session_id: string;
  research_question: string;
  target_demographic: string;
  num_interviews: number;
  created_at: string;
  synthesis: string;
  status: string;
}

export default function ReportsPage() {
  const router = useRouter();
  const { getToken } = useAuth();
  const [reports, setReports] = useState<ResearchReport[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState<
    "all" | "completed" | "pending"
  >("all");
  const [sortBy, setSortBy] = useState<"date" | "question" | "interviews">(
    "date"
  );

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = async () => {
    try {
      const token = await getToken();
      const headers: Record<string, string> = {
        "Content-Type": "application/json",
      };

      if (token) {
        headers["Authorization"] = `Bearer ${token}`;
      }

      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000"}/reports`,
        {
          headers,
        }
      );

      if (response.ok) {
        const data = await response.json();
        setReports(data.data || []);
      } else {
        console.error("Failed to fetch reports:", response.status);
        setReports([]);
      }
    } catch (error) {
      console.error("Failed to fetch reports:", error);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const exportToTxt = async (report: ResearchReport) => {
    try {
      // Fetch detailed report data including personas and interviews
      const response = await fetch(
        `${
          process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000"
        }/dashboard/session/${report.session_id}`
      );
      const detailedData = await response.json();

      const content = `RESEARCH REPORT
=================

Research Question: ${report.research_question}
Target Demographic: ${report.target_demographic}
Number of Interviews: ${report.num_interviews}
Session ID: ${report.session_id}
Created: ${formatDate(report.created_at)}
Status: ${report.status}

PERSONAS
========
${
  detailedData.personas
    ?.map(
      (persona: any, index: number) => `
${index + 1}. ${persona.name}
   Role: ${persona.job || "Role not specified"}
   Background: ${persona.background || "Background not specified"}
   Traits: ${persona.traits?.join(", ") || "None"}
   Communication Style: ${persona.communication_style || "Not specified"}`
    )
    .join("\\n") || "No personas available"
}

INTERVIEWS
==========
${
  detailedData.interviews
    ? Object.entries(detailedData.interviews)
        .map(
          ([personaName, interviews]: [string, any], index: number) => `
${index + 1}. Interview with ${personaName}
${interviews
  .map(
    (qa: any, qaIndex: number) => `
   Q${qaIndex + 1}: ${qa.question}
   A${qaIndex + 1}: ${qa.answer}`
  )
  .join("\\n")}`
        )
        .join("\\n\\n")
    : "No interviews available"
}

SYNTHESIS
=========
${detailedData.synthesis || "No synthesis available"}

Generated by Automated Research App
Export Date: ${new Date().toLocaleString()}`;

      const blob = new Blob([content], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `research-report-${report.session_id}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Failed to export TXT:", error);
      alert(
        'Failed to export report. Please try again or use the "View Details" option.'
      );
    }
  };

  const exportToPdf = async (report: ResearchReport) => {
    try {
      // Dynamic import to avoid SSR issues
      const { jsPDF } = await import("jspdf");

      // Fetch detailed report data including personas and interviews
      const response = await fetch(
        `${
          process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000"
        }/dashboard/session/${report.session_id}`
      );
      const detailedData = await response.json();

      const pdf = new jsPDF();

      // Title
      pdf.setFontSize(16);
      pdf.setFont("helvetica", "bold");
      pdf.text("RESEARCH REPORT", 20, 20);

      // Basic info
      pdf.setFontSize(12);
      pdf.setFont("helvetica", "normal");
      let yPos = 35;

      const addText = (label: string, value: string, maxWidth = 170) => {
        pdf.setFont("helvetica", "bold");
        pdf.text(label, 20, yPos);
        pdf.setFont("helvetica", "normal");
        const lines = pdf.splitTextToSize(value, maxWidth);
        pdf.text(lines, 20, yPos + 5);
        yPos += 5 + lines.length * 5 + 5;
      };

      addText("Research Question:", report.research_question);
      addText("Target Demographic:", report.target_demographic);
      addText("Number of Interviews:", report.num_interviews.toString());
      addText("Session ID:", report.session_id);
      addText("Created:", formatDate(report.created_at));
      addText("Status:", report.status);

      // Personas section
      if (detailedData.personas && detailedData.personas.length > 0) {
        yPos += 10;
        pdf.setFontSize(14);
        pdf.setFont("helvetica", "bold");
        pdf.text("PERSONAS", 20, yPos);
        yPos += 10;

        detailedData.personas.forEach((persona: any, index: number) => {
          if (yPos > 250) {
            pdf.addPage();
            yPos = 20;
          }

          pdf.setFontSize(12);
          addText(`${index + 1}. ${persona.name}`, "");
          addText("   Role:", persona.job || "Role not specified");
          addText(
            "   Background:",
            persona.background || "Background not specified"
          );
          addText("   Traits:", persona.traits?.join(", ") || "None");
          addText(
            "   Communication Style:",
            persona.communication_style || "Not specified"
          );
          yPos += 5;
        });
      }

      // Interviews section
      if (
        detailedData.interviews &&
        Object.keys(detailedData.interviews).length > 0
      ) {
        pdf.addPage();
        yPos = 20;
        pdf.setFontSize(14);
        pdf.setFont("helvetica", "bold");
        pdf.text("INTERVIEWS", 20, yPos);
        yPos += 10;

        Object.entries(detailedData.interviews).forEach(
          ([personaName, interviews]: [string, any], index: number) => {
            if (yPos > 250) {
              pdf.addPage();
              yPos = 20;
            }

            pdf.setFontSize(12);
            addText(`${index + 1}. Interview with ${personaName}`, "");

            interviews.forEach((qa: any, qaIndex: number) => {
              if (yPos > 230) {
                pdf.addPage();
                yPos = 20;
              }
              addText(`   Q${qaIndex + 1}:`, qa.question);
              addText(`   A${qaIndex + 1}:`, qa.answer);
            });
            yPos += 5;
          }
        );
      }

      // Synthesis section
      pdf.addPage();
      yPos = 20;
      pdf.setFontSize(14);
      pdf.setFont("helvetica", "bold");
      pdf.text("SYNTHESIS", 20, yPos);
      yPos += 10;

      pdf.setFontSize(11);
      pdf.setFont("helvetica", "normal");
      const synthesisLines = pdf.splitTextToSize(
        detailedData.synthesis || "No synthesis available",
        170
      );
      synthesisLines.forEach((line: string) => {
        if (yPos > 280) {
          pdf.addPage();
          yPos = 20;
        }
        pdf.text(line, 20, yPos);
        yPos += 5;
      });

      // Footer
      yPos += 10;
      if (yPos > 270) {
        pdf.addPage();
        yPos = 20;
      }
      pdf.setFontSize(10);
      pdf.setFont("helvetica", "italic");
      pdf.text("Generated by Automated Research App", 20, yPos);
      pdf.text(`Export Date: ${new Date().toLocaleString()}`, 20, yPos + 5);

      pdf.save(`research-report-${report.session_id}.pdf`);
    } catch (error) {
      console.error("Failed to export PDF:", error);
      alert("Failed to export PDF. Please try again.");
    }
  };

  const filteredAndSortedReports = reports
    .filter((report) => {
      const matchesSearch =
        report.research_question
          .toLowerCase()
          .includes(searchTerm.toLowerCase()) ||
        report.target_demographic
          .toLowerCase()
          .includes(searchTerm.toLowerCase());
      const matchesStatus =
        filterStatus === "all" || report.status === filterStatus;
      return matchesSearch && matchesStatus;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case "date":
          return (
            new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
          );
        case "question":
          return a.research_question.localeCompare(b.research_question);
        case "interviews":
          return b.num_interviews - a.num_interviews;
        default:
          return 0;
      }
    });

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Loading reports...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <div className="max-w-7xl mx-auto p-6">
        {/* Header */}
        <div className="mb-8">
          <Link
            href="/dashboard"
            className="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Dashboard
          </Link>

          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                Research Reports
              </h1>
              <p className="text-gray-600 dark:text-gray-400">
                View and export all your research reports
              </p>
            </div>
          </div>
        </div>

        {/* Filters and Search */}
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 mb-6">
          <div className="flex flex-col md:flex-row gap-4">
            {/* Search */}
            <div className="flex-1 relative">
              <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
              <input
                type="text"
                placeholder="Search reports..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* Status Filter */}
            <div className="flex items-center gap-2">
              <Filter className="w-5 h-5 text-gray-400" />
              <select
                value={filterStatus}
                onChange={(e) =>
                  setFilterStatus(
                    e.target.value as "all" | "completed" | "pending"
                  )
                }
                className="border border-gray-200 dark:border-gray-700 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                aria-label="Filter by status"
              >
                <option value="all">All Status</option>
                <option value="completed">Completed</option>
                <option value="pending">Pending</option>
              </select>
            </div>

            {/* Sort */}
            <div className="flex items-center gap-2">
              <Target className="w-5 h-5 text-gray-400" />
              <select
                value={sortBy}
                onChange={(e) =>
                  setSortBy(
                    e.target.value as "date" | "question" | "interviews"
                  )
                }
                className="border border-gray-200 dark:border-gray-700 rounded-lg px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                aria-label="Sort by"
              >
                <option value="date">Sort by Date</option>
                <option value="question">Sort by Question</option>
                <option value="interviews">Sort by Interviews</option>
              </select>
            </div>
          </div>
        </div>

        {/* Reports List */}
        <div className="space-y-4">
          {filteredAndSortedReports.map((report) => (
            <div
              key={report.session_id}
              className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 hover:shadow-lg transition-shadow"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                    {report.research_question}
                  </h3>

                  <div className="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-3">
                    <div className="flex items-center gap-1">
                      <Users className="w-4 h-4" />
                      {report.target_demographic}
                    </div>
                    <div className="flex items-center gap-1">
                      <MessageSquare className="w-4 h-4" />
                      {report.num_interviews} interviews
                    </div>
                    <div className="flex items-center gap-1">
                      <Calendar className="w-4 h-4" />
                      {formatDate(report.created_at)}
                    </div>
                  </div>

                  <div className="flex items-center gap-2 mb-3">
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium ${
                        report.status === "completed"
                          ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                          : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400"
                      }`}
                    >
                      {report.status}
                    </span>
                    <span className="text-xs text-gray-500 dark:text-gray-400">
                      ID: {report.session_id}
                    </span>
                  </div>
                </div>

                <div className="flex items-center gap-2 ml-4">
                  <button
                    onClick={() =>
                      router.push(`/research/${report.session_id}`)
                    }
                    className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 border border-blue-200 dark:border-blue-800 rounded-lg hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors"
                  >
                    <ExternalLink className="w-4 h-4" />
                    View Details
                  </button>
                  <button
                    onClick={() => exportToTxt(report)}
                    className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-green-600 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 border border-green-200 dark:border-green-700 rounded-lg hover:bg-green-50 dark:hover:bg-green-800 transition-colors"
                  >
                    <Download className="w-4 h-4" />
                    TXT
                  </button>
                  <button
                    onClick={() => exportToPdf(report)}
                    className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 border border-red-200 dark:border-red-700 rounded-lg hover:bg-red-50 dark:hover:bg-red-800 transition-colors"
                  >
                    <Download className="w-4 h-4" />
                    PDF
                  </button>
                </div>
              </div>
            </div>
          ))}

          {filteredAndSortedReports.length === 0 && (
            <div className="text-center py-12">
              <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                No reports found
              </h3>
              <p className="text-gray-500 dark:text-gray-400">
                {searchTerm || filterStatus !== "all"
                  ? "Try adjusting your search or filter criteria."
                  : "No research reports available yet."}
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
